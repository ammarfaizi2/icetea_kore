.TH KODEV 1
.SH NAME
kodev \- Kore project management tool

.SH SYNOPSIS
.BR kodev
[\fIOPTION\fR] ...

.SH DESCRIPTION
This documentation describes the application management tools for building and
running a Kore project. For information regarding the technical interface and
C bindings, look to
.BR kore(3)
where these functions and structures are described.
.BR Kore
projects may be managed using the following OPTIONS;

.BR create
.RS
Create a new application skeleton with the name that is passed to it. This will
create a new directory with all the files required to begin hacking. See the
\fBGENERATED FILES\fR section for more information.
.RE

.BR build
.RS
Build the application. See the \fBBUILDING\fR section for more information.
.RE

.BR run
.RS
Start the application in the foreground. See the \fBRUNNING\fR section for
more information.
.RE

.BR reload
.RS
Reload the application. This is a shortcut to sending SIGHUP to the parent
process (see kore_pid).
.RE

.BR info
.RS
Show information about the application configuration. Namely; active flavor,
output type, Kore features, Kore source and Kore binary.
.RE

.BR clean
.RS
Cleanup the build files.
.RE

.BR flavor
.RS
Switch between build flavors with the argument being the new flavor.
.RE

.BR help
.RS
Show the help synopsis.
.RE

.BR \-p
.RS
Option used in conjunction with \fBcreate\fR to generate an application for use
with the
.BR pyko
Kore framework.
.RE

.SH GENERATED FILES
Executing the
.BR create
command will generate several new files under the directory matching the
application name specified.

These files are:

.RS
.BR conf/build.conf
.RS
The build configuration.
.RE

.BR conf/app.conf
.RS
The Kore application configuration.
.RE

.BR src/app.c
.RS
The initial placeholder source code.
.RE

.BR cert/server.pem
.RS
The self-signed auto-generated x509 certificate.
.RE

.BR cert/key.pem
.RS
The key matching the self-signed x509 certificate.
.RE

.BR dh2048.pem
.RS
The 2048-bit DH parameters used by TLS.
.RE
.RE

If you specify the
.BR -p
flag the generated files will be for use with
.BR pyko
instead.

Those files are:

.RS
.BR kore.conf
.RS
The Kore application configuration.
.RE
.RE

.RS
.BR handlers.py
.RS
The initial placeholder python page handler.
.RE
.RE

.RS
.BR __init__.py
.RS
The python initialization code. Sets up the kore listener, etc.
.RE
.RE

.RS
.BR cert/server.pem
.RS
The self-signed auto-generated x509 certificate.
.RE
.RE

.RS
.BR cert/key.pem
.RS
The key matching the self-signed x509 certificate.
.RE
.RE

.RS
.BR dh2048.pem
.RS
The 2048-bit DH parameters used by TLS.
.RE
.RE


.SH BUILDING
Executing the
.BR build
command will build your application. How this happens is instructed by
the
.BR conf/build.conf
configuration file. This file supports the following directives:

.RS
.BR single_binary
[yes|no]
.RS
If set to \fByes\fR the build system will produce a single binary containing
both your application code and the Kore code allowing you to distribute
your application more easily.

If set to \fBno\fR the build system will produce a standard dynamicly
linked library that will be loaded into Kore at runtime.
.RE
.RE

.RS
.BR kore_source
[path]
.RS
Must be set to point to the a Kore source code directory. Used only if
.BR single_binary
option is set to \fByes\fR.

.BR Example:
kore_source=/home/joris/src/kore
.RE
.RE
.RE

.RS
.BR kore_flavor
[build options]
.RS
Defines the build arguments for building Kore. Used only if
.BR single_binary
option is set to \fByes\fR.

.BR Example:
kore_flavor=NOTLS=1
.RE
.RE

.RS
.BR cflags
.RS
Standard
.BR CFLAGS
used when compiling the application source code.
.RE
.RE

.RS
.BR ldflags
.RS
Standard
.BR LDFLAGS
used when linking the application source code.
.RE
.RE

Note that the
.BR build
command obeys the environment variables
.BR CC
and
.BR CXX

.SH RUNNING
Executing the
.BR run
command will start your application in the foreground.

What binary it executes depends
on whether or not the
.BR single_binary
flag was set in build configuration. If the
.BR single_binary
flag was enabled the
.BR run
command will execute the binary produced by the build system. If the
.BR single_binary
flag was not enabled the
.BR run
command will execute the
.BR $PREFIX/bin/kore
binary.
In both cases the
.BR run
command will pass the \fB\-fnr\fR command line options to the binary.
.RE

.SH EXAMPLES
Changing flavor of the build;

.RS
$ kodev flavor osx
.RE

Creating a new application 'app' with \fBpyko\fR support;

.RS
$ kodev create \-p app
.RE

Building your application;

.RS
$ kodev build
.RE

.SH REPORTING BUGS, CONTRIBUTING && MORE
If you run into any bugs, have suggestions or patches, please contact me at
.BR <joris@coders.se>

More information can be found at
.BR <https://kore.io/>

.SH AUTHOR
.BR Kore
developed by Joris Vink
.BR <joris@coders.se>

Manpage authored by Guy Nankivell
.BR <guynankivell@gmail.com>

.SH LICENCE
Usage of this software is provided under the
.BR ISC
license which may be found, with the source, at
.BR <https://github.com/jorisvink/kore>

